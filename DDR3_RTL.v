
//=======================================================
//  This code is partially generated by Terasic System Builder
//=======================================================

module DDR3_RTL(

  ////////////

	//////////// ADC //////////
	output		          		ADC_CONVST,
	output		          		ADC_SCK,
	output		          		ADC_SDI,
	input 		          		ADC_SDO,

	//////////// ARDUINO //////////
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,

	//////////// CLOCK //////////
	input 		          		FPGA_CLK1_50,
	input 		          		FPGA_CLK2_50,
	input 		          		FPGA_CLK3_50,

	//////////// HDMI //////////
	inout 		          		HDMI_I2C_SCL,
	inout 		          		HDMI_I2C_SDA,
	inout 		          		HDMI_I2S,
	inout 		          		HDMI_LRCLK,
	inout 		          		HDMI_MCLK,
	inout 		          		HDMI_SCLK,
	output		          		HDMI_TX_CLK,
	output		          		HDMI_TX_DE,
	output		    [23:0]		HDMI_TX_D,
	output		          		HDMI_TX_HS,
	input 		          		HDMI_TX_INT,
	output		          		HDMI_TX_VS,

	//////////// HPS //////////
	output		    [14:0]		HPS_DDR3_ADDR,
	output		     [2:0]		HPS_DDR3_BA,
	output		          		HPS_DDR3_CAS_N,
	output		          		HPS_DDR3_CKE,
	output		          		HPS_DDR3_CK_N,
	output		          		HPS_DDR3_CK_P,
	output		          		HPS_DDR3_CS_N,
	output		     [3:0]		HPS_DDR3_DM,
	inout 		    [31:0]		HPS_DDR3_DQ,
	inout 		     [3:0]		HPS_DDR3_DQS_N,
	inout 		     [3:0]		HPS_DDR3_DQS_P,
	output		          		HPS_DDR3_ODT,
	output		          		HPS_DDR3_RAS_N,
	output		          		HPS_DDR3_RESET_N,
	input 		          		HPS_DDR3_RZQ,
	output		          		HPS_DDR3_WE_N,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [7:0]		LED,

	//////////// SW //////////
	input 		     [3:0]		SW
);


//=======================================================
//  REG/WIRE declarations
//=======================================================
wire DDR3_CLK;
wire Debounce_KEY0;
wire Debounce_KEY1;
wire Debounce_KEY2;

//=======================================================
//  Structural coding
//=======================================================
debounce d0(
  .clk(FPGA_CLK2_50), 		
  .reset_n(1'b1), 
  .idebounce(KEY[0]),
  .odebounce(Debounce_KEY0)  
);


debounce d1(
  .clk(FPGA_CLK2_50), 
  .reset_n(1'b1), 
  .idebounce(KEY[1]),
  .odebounce(Debounce_KEY1)  
);

 soc_system u0 (
		//Clock&Reset
	  .clk_clk                               ( FPGA_CLK1_50 ),                               //                            clk.clk
	  .ddr3_clk_clk                          ( DDR3_CLK ),                             //                    clk_ddr3.clk
 
	  //HPS ddr3
	  .memory_mem_a                          ( HPS_DDR3_ADDR),                       //                memory.mem_a
	  .memory_mem_ba                         ( HPS_DDR3_BA),                         //                .mem_ba
	  .memory_mem_ck                         ( HPS_DDR3_CK_P),                       //                .mem_ck
	  .memory_mem_ck_n                       ( HPS_DDR3_CK_N),                       //                .mem_ck_n
	  .memory_mem_cke                        ( HPS_DDR3_CKE),                        //                .mem_cke
	  .memory_mem_cs_n                       ( HPS_DDR3_CS_N),                       //                .mem_cs_n
	  .memory_mem_ras_n                      ( HPS_DDR3_RAS_N),                      //                .mem_ras_n
	  .memory_mem_cas_n                      ( HPS_DDR3_CAS_N),                      //                .mem_cas_n
	  .memory_mem_we_n                       ( HPS_DDR3_WE_N),                       //                .mem_we_n
	  .memory_mem_reset_n                    ( HPS_DDR3_RESET_N),                    //                .mem_reset_n
	  .memory_mem_dq                         ( HPS_DDR3_DQ),                         //                .mem_dq
	  .memory_mem_dqs                        ( HPS_DDR3_DQS_P),                      //                .mem_dqs
	  .memory_mem_dqs_n                      ( HPS_DDR3_DQS_N),                      //                .mem_dqs_n
	  .memory_mem_odt                        ( HPS_DDR3_ODT),                        //                .mem_odt
	  .memory_mem_dm                         ( HPS_DDR3_DM),                         //                .mem_dm
	  .memory_oct_rzqin                      ( HPS_DDR3_RZQ),                        //                .oct_rzqin

     .ddr3_hps_f2h_sdram0_clock_clk          (DDR3_CLK),          // ddr3_0_hps_f2h_sdram0_clock.clk
     .ddr3_hps_f2h_sdram0_data_address       (ddr3_avl_addr),       //  ddr3_0_hps_f2h_sdram0_data.address
     .ddr3_hps_f2h_sdram0_data_read          (ddr3_avl_read_req),          //                            .read
     .ddr3_hps_f2h_sdram0_data_readdata      (ddr3_avl_rdata),      //                            .readdata
     .ddr3_hps_f2h_sdram0_data_write         (ddr3_avl_write_req),         //                            .write
     .ddr3_hps_f2h_sdram0_data_writedata     (ddr3_avl_wdata),     //                            .writedata
     .ddr3_hps_f2h_sdram0_data_readdatavalid (ddr3_avl_rdata_valid), //                            .readdatavalid
     .ddr3_hps_f2h_sdram0_data_waitrequest   (ddr3_avl_waitrequest),   //                            .waitrequest
     .ddr3_hps_f2h_sdram0_data_byteenable    (ddr3_avl_byte_enable),    //                            .byteenable
     .ddr3_hps_f2h_sdram0_data_burstcount    (ddr3_avl_size)     //                            .burstcount
);
	

/////////////////// DDR3(A) Test ///////////////////
wire         ddr3_avl_waitrequest;                  //          	 .avl.waitrequest
wire [25:0]  ddr3_avl_addr;                   //             .address
wire         ddr3_avl_rdata_valid;            //             .readdatavalid
wire [31:0] ddr3_avl_rdata;                  //             .readdata
wire [31:0] ddr3_avl_wdata;                  //             .writedata
wire         ddr3_avl_read_req;               //             .read
wire         ddr3_avl_write_req;              //             .write
wire [7:0]   ddr3_avl_size;                   //             .burstcount
wire [3:0]  ddr3_avl_byte_enable;
wire [2:0] sw_to_test_unit;

wire busy;
wire dataValid;
wire [255:0] readData;
wire command;
wire writeElseRead;
wire testReady;
wire [1:0] commandSize;
wire [14:0] targetAddr;
wire [2:0] subAddr;

PSX_DDR_Interface server(
  .i_clk(DDR3_CLK),
  .i_rst(Debounce_KEY1),
  
  .i_command(command),
  .i_commandSize(commandSize),
  .i_writeElseRead(writeElseRead),
  .i_targetAddr(targetAddr),
  .i_subAddr(subAddr),
  .i_writeMask(16'hFFFF),
  .i_dataClient(256'hCDEF_1234_4567_89AB_BCDE_F123_3456_789A_ABCD_EF12_2345_6789_9ABC_DEF1_1234_5678),
  .o_busyClient(busy),
  .o_dataValidClient(dataValid),
  .o_dataClient(readData),
  
  .i_busyMem(ddr3_avl_waitrequest),
  .i_dataValidMem(ddr3_avl_rdata_valid),
  .i_dataMem(ddr3_avl_rdata),
  .o_writeEnableMem(ddr3_avl_write_req),
  .o_readEnableMem(ddr3_avl_read_req),
  .o_burstLength(ddr3_avl_size),
  .o_dataMem(ddr3_avl_wdata),
  .o_targetAddr(ddr3_avl_addr),
  .o_byteEnableMem(ddr3_avl_byte_enable)
);

test_client client(
  .i_clk(DDR3_CLK),
  .i_rst(Debounce_KEY1),
  .i_startTest(!Debounce_KEY0),
  
  .i_serverBusy(busy),
  .i_dataValid(dataValid),
  .i_readData(readData),
  .o_command(command),
  .o_writeElseRead(writeElseRead),
  .o_commandSize(commandSize),
  .o_targetAddr(targetAddr),
  .o_subAddr(subAddr),
  .o_ready(testReady)
);

// DDR protocol is 128-bit but we are sending 32-bit data.
// Hence there are 96 unused bits.
// Regardless, tie byte enables to 1s so that memory can be overwritten temporarily for testing purposes 
assign LED[7] =  heart_beat[23];
assign LED[6] = testReady;

reg [23:0] heart_beat;

always @ (posedge FPGA_CLK2_50)
begin
	heart_beat <= heart_beat + 1'b1;
end

endmodule
